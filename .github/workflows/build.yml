name: Build

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Debug - List files
        run: |
          echo "Listing files in the repository:"
          ls -R

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller psutil

      - name: Get version from tag
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=dev
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build console executable
        run: |
          pyinstaller build.spec
          if [[ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
            mv dist/glaze-autotiler.exe dist/glaze-autotiler-console-${{ steps.get_version.outputs.version }}.exe
          else
            mv dist/glaze-autotiler.exe dist/glaze-autotiler-console-dev.exe
          fi
        shell: bash

      - name: Build no-console executable
        run: |
          pyinstaller build-noconsole.spec
          if [[ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
            mv dist/glaze-autotiler-noconsole.exe dist/glaze-autotiler-${{ steps.get_version.outputs.version }}.exe
          else
            mv dist/glaze-autotiler-noconsole.exe dist/glaze-autotiler-dev.exe
          fi
        shell: bash

      - name: Upload console artifact
        uses: actions/upload-artifact@v4
        with:
          name: glaze-autotiler-console-${{ steps.get_version.outputs.version }}
          path: dist/glaze-autotiler-console-${{ steps.get_version.outputs.version }}.exe

      - name: Upload no-console artifact
        uses: actions/upload-artifact@v4
        with:
          name: glaze-autotiler-${{ steps.get_version.outputs.version }}
          path: dist/glaze-autotiler-${{ steps.get_version.outputs.version }}.exe

      - name: Get previous tag
        id: prev_tag
        run: |
          # Get previous tag or default to v0.0.0 if none exists
          git fetch --prune --unshallow
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo 'v0.0.0')
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate release notes
        id: release_notes
        run: |
          PREV_TAG=${{ steps.prev_tag.outputs.prev_tag }}
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            NEW_TAG=${GITHUB_REF#refs/tags/}
            echo "Previous tag: $PREV_TAG"
            echo "New tag: $NEW_TAG"

            # Get commits affecting src/ directory
            COMMITS=$(git log --pretty=format:"%h - %s" $PREV_TAG..$NEW_TAG -- src/)

            # Format release notes
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since $PREV_TAG" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "$COMMITS" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/glaze-autotiler-${{ steps.get_version.outputs.version }}.exe
            dist/glaze-autotiler-console-${{ steps.get_version.outputs.version }}.exe
          body: ${{ steps.release_notes.outputs.notes }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
