name: Build

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Debug - List files
        run: |
          echo "Listing files in the repository:"
          ls -R

      - name: Bump version in files
        if: startsWith(github.ref, 'refs/tags/v')
        id: bump_version
        shell: bash
        run: |
          NEW_VERSION=${GITHUB_REF#refs/tags/}
          echo "New version: $NEW_VERSION"

          # Update version in main.py
          sed -i "s/APP_VERSION = \".*\"/APP_VERSION = \"$NEW_VERSION\"/" src/main.py

          # Update version in manifest.xml
          sed -i "s/version=\"[0-9.]*\"/version=\"$NEW_VERSION.0\"/" manifest.xml

          # Update version in file_version_info.txt
          sed -i "s/filevers=(.*)/filevers=(${NEW_VERSION//./,},0)/" file_version_info.txt
          sed -i "s/prodvers=(.*)/prodvers=(${NEW_VERSION//./,},0)/" file_version_info.txt
          sed -i "s/StringStruct(u'FileVersion', u'.*')/StringStruct(u'FileVersion', u'$NEW_VERSION')/" file_version_info.txt
          sed -i "s/StringStruct(u'ProductVersion', u'.*')/StringStruct(u'ProductVersion', u'$NEW_VERSION')/" file_version_info.txt

          # Commit changes
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add src/main.py manifest.xml file_version_info.txt
          git commit -m "Bump version to $NEW_VERSION"

          # Determine the branch name
          BRANCH_NAME=$(git branch -r --contains $GITHUB_SHA | grep -o 'origin/[^ ]*' | head -n 1 | sed 's|origin/||')
          if [[ -z "$BRANCH_NAME" ]]; then
            BRANCH_NAME="main"
          fi

          # Push the changes to the correct branch
          git push origin HEAD:$BRANCH_NAME || { echo "Failed to push changes"; exit 1; }

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: |
          pyinstaller build.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: glaze-autotiler-${{ runner.os }}
          path: dist/glaze-autotiler.exe

      - name: Get previous tag
        id: prev_tag
        run: echo "::set-output name=prev_tag::$(git describe --tags --abbrev=0 HEAD^)"
        shell: bash

      - name: Generate release notes
        id: release_notes
        run: |
          PREV_TAG=${{ steps.prev_tag.outputs.prev_tag }}
          NEW_TAG=${GITHUB_REF#refs/tags/}
          echo "Previous tag: $PREV_TAG"
          echo "New tag: $NEW_TAG"
          COMMITS=$(git log $PREV_TAG..$NEW_TAG --pretty=format:"%h - %s" -- src/main.py)
          echo "Release notes: $COMMITS"
          echo "::set-output name=notes::$COMMITS"
        shell: bash

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/glaze-autotiler.exe
          body: ${{ steps.release_notes.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
